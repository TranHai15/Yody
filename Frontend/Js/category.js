// Object l∆∞u tr·ªØ gi√° tr·ªã l·ªçc
const btn__drop = document.querySelector(".dropbtn");
btn__drop.addEventListener("click", () => {
  const list__drop = document.querySelector(".dropdown__content");
  list__drop.classList.toggle("display__none");
  const icon__bottom = document.querySelector(".icon__bottom");
  const icon__top = document.querySelector(".icon__top");
  icon__top.classList.toggle("display__none");
  icon__bottom.classList.toggle("display__none");
});

//  const
const list__name = document.querySelectorAll(".list__name");
list__name.forEach((e) => {
  e.addEventListener("click", () => {
    const list__content__none = e.nextElementSibling;
    list__content__none.classList.toggle("display__none");
    // console.log(icon__bottom)
    // icon__bottom.classList.toggle("xoay")
  });
});

// Object l∆∞u tr·ªØ gi√° tr·ªã l·ªçc
let filterValues = {
  gender: [],
  colors: [],
  sizes: [],
  price: [],
};

// H√†m g·ª≠i d·ªØ li·ªáu l√™n server qua AJAX
function sendFilterValues() {
  fetch(`Backend/controller/client/clientAjax.php`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(filterValues),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log(data.kq); // Hi·ªÉn th·ªã k·∫øt qu·∫£ tr·∫£ v·ªÅ (danh s√°ch s·∫£n ph·∫©m)
      // displayResults(data); // H√†m render s·∫£n ph·∫©m (c·∫ßn t·∫°o)
      // G·ªçi h√†m render v·ªõi d·ªØ li·ªáu JSON
      renderProducts(data.kq);
    })
    .catch((error) => console.error("Error:", error));
}

// X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn checkbox (gi·ªõi t√≠nh, gi√°)
document
  .querySelectorAll('.checkbox-item input[type="checkbox"]')
  .forEach((checkbox) => {
    checkbox.addEventListener("change", (event) => {
      const { id, checked } = event.target;
      const category = event.target.closest(".list__sex")
        ? "gender"
        : event.target.closest(".list__price")
        ? "price"
        : null;

      if (category) {
        if (checked) {
          filterValues[category].push(id);
        } else {
          filterValues[category] = filterValues[category].filter(
            (item) => item !== id
          );
        }
      }

      // G·ª≠i d·ªØ li·ªáu ngay sau khi thay ƒë·ªïi
      sendFilterValues();
    });
  });

// X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn m√†u s·∫Øc
document
  .querySelectorAll(".color-item .color-circle")
  .forEach((colorCircle) => {
    colorCircle.addEventListener("click", (event) => {
      const color = colorCircle.getAttribute("data-color");
      console.log(color);
      const index = filterValues.colors.indexOf(color);
      if (index > -1) {
        filterValues.colors.splice(index, 1); // B·ªè m√†u n·∫øu ƒë√£ ch·ªçn
      } else {
        filterValues.colors.push(color); // Th√™m m√†u n·∫øu ch∆∞a ch·ªçn
      }

      // G·ª≠i d·ªØ li·ªáu ngay sau khi thay ƒë·ªïi
      sendFilterValues();
    });
  });

// X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn k√≠ch th∆∞·ªõc
document.querySelectorAll(".size-item .size-circle").forEach((sizeCircle) => {
  sizeCircle.addEventListener("click", (event) => {
    const size = event.target.textContent.trim();
    const index = filterValues.sizes.indexOf(size);
    if (index > -1) {
      filterValues.sizes.splice(index, 1); // B·ªè k√≠ch th∆∞·ªõc n·∫øu ƒë√£ ch·ªçn
    } else {
      filterValues.sizes.push(size); // Th√™m k√≠ch th∆∞·ªõc n·∫øu ch∆∞a ch·ªçn
    }

    // G·ª≠i d·ªØ li·ªáu ngay sau khi thay ƒë·ªïi
    sendFilterValues();
  });
});

function replaceSpacesWithHyphen(str) {
  return str.replace(/\s+/g, "-");
}

// Container ƒë·ªÉ render danh s√°ch s·∫£n ph·∫©m
const container = document.querySelector(".products");
console.log("üöÄ ~ container:", container);

// H√†m render s·∫£n ph·∫©m
function renderProducts(products) {
  // X√≥a n·ªôi dung c≈©
  container.innerHTML = "";

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
  console.log(products);
  if (products == undefined) {
    container.innerHTML = `
      <div class="no-products">
        <p>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm c·ªßa b·∫°n.</p>
      </div>
    `;
    return;
  }

  // N·∫øu c√≥ s·∫£n ph·∫©m, render danh s√°ch
  products.forEach((product) => {
    const name = replaceSpacesWithHyphen(product.name);

    // T√≠nh gi√° khuy·∫øn m√£i n·∫øu c√≥
    const sale =
      product.old_price > 0
        ? product.new_price - product.new_price * (product.old_price / 100)
        : product.new_price;

    // Chuy·ªÉn chu·ªói variations th√†nh ƒë·ªëi t∆∞·ª£ng JSON
    const variations = JSON.parse(product.variations);

    // HTML t·ª´ng s·∫£n ph·∫©m
    const productHTML = `
      <article class="product l-3 m-4 c-12">
        <a href="/Yody/product?${name}&color=${product.colorId}">
          <div class="product__image">
            <img loading="lazy" src="${product.ImageMain}" alt="${
      product.name
    }" />
          </div>
          <span class="product__name">${product.name}</span>
          <div class="product__price row align-items-center">
            ${
              product.old_price > 0
                ? `<span class="price__new">${formatCurrency(
                    sale
                  )}</span><span class="price__old">${formatCurrency(
                    product.new_price
                  )}</span>`
                : `<span class="price__new">${formatCurrency(
                    product.new_price
                  )}</span>`
            }
            ${
              product.old_price > 0
                ? `<div class="product__logo--sale row align-items-center justify-content-center"><span>-${product.old_price}%</span></div>`
                : ""
            }
          </div>
          <div class="product__variation row align-items-center">
            ${variations
              .map(
                (variation) => `
              <a href="/Yody/product?${name}&color=${
                  variation.variationId
                }" data-images="${variation.image}">
                <span class="product__variation--item ${
                  variation.variationId === product.colorId
                    ? "active__product--variation"
                    : ""
                }" style="background-color: ${variation.anhColor}"></span>
              </a>
            `
              )
              .join("")}
          </div>
        </a>
      </article>
    `;

    // G·∫Øn s·∫£n ph·∫©m v√†o container
    container.innerHTML += productHTML;
  });
}

// H√†m ƒë·ªãnh d·∫°ng gi√° ti·ªÅn (VND)
function formatCurrency(value) {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
    minimumFractionDigits: 0,
  }).format(value);
}
